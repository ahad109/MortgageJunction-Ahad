/**
 * @description       : 
 * @author            : M Hamza Siddiqui @ mhamzas.com
 * @group             : 
 * @last modified on  : 06-10-2022
 * @last modified by  : M Hamza Siddiqui
 * Modifications Log 
 * Ver   Date         Author                           Modification
 * 1.0   03-19-2021   M Hamza Siddiqui @ mhamzas.com   Initial Version
 * 1.1	 06-10-2022	  M Hamza Siddiqui @ mhamzas.com   Fixed DateTime validation
**/
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class FilogixGETJSONWrapper {

	public class ApplicantGroup {
		public String applicantGroupTypeDd {get;set;} 
		public List<Applicant> applicant {get;set;} 
		public Integer borrowerGroupId {get;set;} 
		public MailingAddr mailingAddr {get;set;} 
		public String mailingAddressIndicator {get;set;} 

		public ApplicantGroup(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'applicantGroupTypeDd') {
							applicantGroupTypeDd = parser.getText();
						} else if (text == 'applicant') {
							applicant = arrayOfApplicant(parser);
						} else if (text == 'borrowerGroupId') {
							borrowerGroupId = parser.getIntegerValue();
						} else if (text == 'mailingAddr') {
							mailingAddr = new MailingAddr(parser);
						} else if (text == 'mailingAddressIndicator') {
							mailingAddressIndicator = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ApplicantGroup consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DocumentList {
		public String documentTypeDd {get;set;} 
		public String documentImage {get;set;} 
		public Integer loanDecisionDocumentId {get;set;} 
		public Integer loanDecisionId {get;set;} 

		public DocumentList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'documentTypeDd') {
							documentTypeDd = parser.getText();
						} else if (text == 'documentImage') {
							documentImage = parser.getText();
						} else if (text == 'loanDecisionDocumentId') {
							loanDecisionDocumentId = parser.getIntegerValue();
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'DocumentList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public Integer addrId {get;set;} 
		public String unitNumber {get;set;} 
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetTypeDd {get;set;} 
		public String streetDirectionDd {get;set;} 
		public String city {get;set;} 
		public String provinceDd {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'unitNumber') {
							unitNumber = parser.getText();
						} else if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetTypeDd') {
							streetTypeDd = parser.getText();
						} else if (text == 'streetDirectionDd') {
							streetDirectionDd = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'provinceDd') {
							provinceDd = parser.getText();
						} else if (text == 'postalFsa') {
							postalFsa = parser.getText();
						} else if (text == 'postalLdu') {
							postalLdu = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ApplicantList {
		public Integer applicantId {get;set;} 
		public Description isOnTitle {get;set;} 
		public Description languagePreference {get;set;} 
		public Integer loanDecisionId {get;set;} 
		public Name_Y name {get;set;} 

		public ApplicantList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'applicantId') {
							applicantId = parser.getIntegerValue();
						} else if (text == 'isOnTitle') {
							isOnTitle = new Description(parser);
						} else if (text == 'languagePreference') {
							languagePreference = new Description(parser);
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else if (text == 'name') {
							name = new Name_Y(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ApplicantList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Income {
		public Integer incomeId {get;set;} 
		public Double annualIncomeAmount {get;set;} 
		public Double incomeAmount {get;set;} 
		public String incomePeriodDd {get;set;} 
		public String incomeTypeDd {get;set;} 

		public Income(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'incomeId') {
							incomeId = parser.getIntegerValue();
						} else if (text == 'annualIncomeAmount') {
							annualIncomeAmount = parser.getDoubleValue();
						} else if (text == 'incomeAmount') {
							incomeAmount = parser.getDoubleValue();
						} else if (text == 'incomePeriodDd') {
							incomePeriodDd = parser.getText();
						} else if (text == 'incomeTypeDd') {
							incomeTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Income consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Co_agentProfile {
		public Contact_X contact {get;set;} 
		public String firmCode {get;set;} 
		public String licenseRegistrationNumber {get;set;} 
		public String profileStatusDd {get;set;} 
		public String userLogin {get;set;} 
		public Integer userProfileId {get;set;} 
		public String userTypeDd {get;set;} 

		public Co_agentProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_X(parser);
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'licenseRegistrationNumber') {
							licenseRegistrationNumber = parser.getText();
						} else if (text == 'profileStatusDd') {
							profileStatusDd = parser.getText();
						} else if (text == 'userLogin') {
							userLogin = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = parser.getIntegerValue();
						} else if (text == 'userTypeDd') {
							userTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Co_agentProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Conditions {
		public Integer conditionId {get;set;} 
		public String conditionLabel {get;set;} 
		public String conditionLabelFr {get;set;} 
		public String conditionStatus {get;set;} 
		public String conditionStatusFr {get;set;} 
		public String conditionText {get;set;} 
		public String conditionTextFr {get;set;} 
		public String conditionType {get;set;} 
		public String conditionTypeFr {get;set;} 
		public Integer conditionUpdateId {get;set;} 
		public String sectionCode {get;set;}

		public Conditions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'conditionId') {
							conditionId = parser.getIntegerValue();
						} else if (text == 'conditionLabel') {
							conditionLabel = parser.getText();
						} else if (text == 'conditionLabelFr') {
							conditionLabelFr = parser.getText();
						} else if (text == 'conditionStatus') {
							conditionStatus = parser.getText();
						} else if (text == 'conditionStatusFr') {
							conditionStatusFr = parser.getText();
						} else if (text == 'conditionText') {
							conditionText = parser.getText();
						} else if (text == 'conditionTextFr') {
							conditionTextFr = parser.getText();
						} else if (text == 'conditionType') {
							conditionType = parser.getText();
						} else if (text == 'conditionTypeFr') {
							conditionTypeFr = parser.getText();
						} else if (text == 'conditionUpdateId') {
							conditionUpdateId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Conditions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name {
		public String salutationDd {get;set;} 
		public String firstName {get;set;} 
		public String middleInitial {get;set;} 
		public String lastName {get;set;} 
		public String suffixDd {get;set;}
		public String first {get;set;}
		public String last {get;set;} 

		public Name(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'salutationDd') {
							salutationDd = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'middleInitial') {
							middleInitial = parser.getText();
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else if (text == 'suffixDd') {
							suffixDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Name consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Result {
		public MortgageApplication mortgageApplication {get;set;} 

		public Result(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'mortgageApplication') {
							mortgageApplication = new MortgageApplication(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Result consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactName_Z {
		public String contactFirstName {get;set;} 
		public String contactLastName {get;set;} 

		public ContactName_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactFirstName') {
							contactFirstName = parser.getText();
						} else if (text == 'contactLastName') {
							contactLastName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ContactName_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactName_Y {
		public String contactFirstName {get;set;} 
		public String contactMiddleInitial {get;set;} 
		public String contactLastName {get;set;} 

		public ContactName_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactFirstName') {
							contactFirstName = parser.getText();
						} else if (text == 'contactMiddleInitial') {
							contactMiddleInitial = parser.getText();
						} else if (text == 'contactLastName') {
							contactLastName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ContactName_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OtherProperty {
		public Property property {get;set;} 
		public List<Mortgage> mortgage {get;set;} 

		public OtherProperty(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'property') {
							property = new Property(parser);
						} else if (text == 'mortgage') {
							mortgage = arrayOfMortgage(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OtherProperty consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EmploymentHistory {
		public Integer employmentHistoryId {get;set;} 
		public String companyType {get;set;} 
		public Contact_V contact {get;set;} 
		public String employerName {get;set;} 
		public String employmentHistoryStatusDd {get;set;} 
		public String employmentHistoryTypeDd {get;set;} 
		public Decimal grossRevenue {get;set;} 
		public Income income {get;set;} 
		public String industrySectorDd {get;set;} 
		public String jobTitle {get;set;} 
		public Integer monthsOfService {get;set;} 
		public String occupationDd {get;set;} 
		public String operatingAs {get;set;} 
		public String selfEmploymentFlag {get;set;} 
		public Double timeInIndustry {get;set;} 

		public EmploymentHistory(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'employmentHistoryId') {
							employmentHistoryId = parser.getIntegerValue();
						} else if (text == 'companyType') {
							companyType = parser.getText();
						} else if (text == 'contact') {
							contact = new Contact_V(parser);
						} else if (text == 'employerName') {
							employerName = parser.getText();
						} else if (text == 'employmentHistoryStatusDd') {
							employmentHistoryStatusDd = parser.getText();
						} else if (text == 'employmentHistoryTypeDd') {
							employmentHistoryTypeDd = parser.getText();
						} else if (text == 'grossRevenue') {
							grossRevenue = parser.getDecimalValue();
						} else if (text == 'income') {
							income = new Income(parser);
						} else if (text == 'industrySectorDd') {
							industrySectorDd = parser.getText();
						} else if (text == 'jobTitle') {
							jobTitle = parser.getText();
						} else if (text == 'monthsOfService') {
							monthsOfService = parser.getIntegerValue();
						} else if (text == 'occupationDd') {
							occupationDd = parser.getText();
						} else if (text == 'operatingAs') {
							operatingAs = parser.getText();
						} else if (text == 'selfEmploymentFlag') {
							selfEmploymentFlag = parser.getText();
						} else if (text == 'timeInIndustry') {
							timeInIndustry = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'EmploymentHistory consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Mortgage {
		public Integer mortgageId {get;set;} 
		public List<BorrowerIds> borrowerIds {get;set;} 
		public Integer dealId {get;set;} 
		public Double actualPaymentTerm {get;set;} 
		public Double amortizationTerm {get;set;} 
		public Double balanceRemaining {get;set;} 
		public Double cashBackAmt {get;set;} 
		public String cashBackOverride {get;set;} 
		public Double cashBackPercentage {get;set;} 
		public String commercialFlag {get;set;} 
		public String constructionFlag {get;set;} 
		public Double effectiveAmortization {get;set;} 
		public String existingMortgageFlag {get;set;} 
		public String firstPaymentDate {get;set;} 
		public String helocFlag {get;set;} 
		public String insuredFlag {get;set;} 
		public Double interestAdjustmentAmount {get;set;} 
		public String interestAdjustmentDate {get;set;} 
		public String interestCompoundDd {get;set;} 
		public String interestOnlyFlag {get;set;} 
		public String interestTypeDd {get;set;} 
		public String lineOfBusinessDd {get;set;} 
		public String loanTypeDd {get;set;} 
		public Double ltv {get;set;} 
		public String marketSubmission {get;set;} 
		public String maturityDate {get;set;} 
		public Double miPremiumAmount {get;set;} 
		public Double miPremiumPst {get;set;} 
		public String mortgageTypeDd {get;set;} 
		public String mtgInsIncludeFlag {get;set;} 
		public Double netLoanAmount {get;set;} 
		public Double PAndIPaymentAmount {get;set;} 
		public Double PAndIPaymentAmountMonthly {get;set;} 
		public String paymentFrequencyDd {get;set;} 
		public String paymentTermDd {get;set;} 
		public Rate rate {get;set;} 
		public String refiBlendedAmortization {get;set;} 
		public Double requestedRate {get;set;} 
		public String reverseFlag {get;set;} 
		public String singleProgressiveTypeDd {get;set;} 
		public String statusDd {get;set;} 
		public String statusDate {get;set;} 
		public String subprimeFlag {get;set;} 
		public Double totalLoanAmount {get;set;} 
		public Double PAndIPaymentAmountQualify {get;set;} 
		public Double qualifyingGds {get;set;} 
		public Decimal qualifyRate {get;set;} 
		public Double qualifyingTds {get;set;} 
		public QualifyDetail qualifyDetail {get;set;} 
		public String currentMortgageNumber {get;set;} 
		public String existingMortgageHolder {get;set;} 
		public String miReferenceNumber {get;set;}
		/*Added by Zain Abbas - Start*/
		public double originalMortgageAmount {get; set;}
		/*Added by Zain Abbas - End*/

		public Mortgage(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'mortgageId') {
							mortgageId = parser.getIntegerValue();
						} else if (text == 'borrowerIds') {
							borrowerIds = arrayOfBorrowerIds(parser);
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'actualPaymentTerm') {
							actualPaymentTerm = parser.getDoubleValue();
						} else if (text == 'amortizationTerm') {
							amortizationTerm = parser.getDoubleValue();
						} else if (text == 'balanceRemaining') {
							balanceRemaining = parser.getDoubleValue();
						} else if (text == 'cashBackAmt') {
							cashBackAmt = parser.getDoubleValue();
						} else if (text == 'cashBackOverride') {
							cashBackOverride = parser.getText();
						} else if (text == 'cashBackPercentage') {
							cashBackPercentage = parser.getDoubleValue();
						} else if (text == 'commercialFlag') {
							commercialFlag = parser.getText();
						} else if (text == 'constructionFlag') {
							constructionFlag = parser.getText();
						} else if (text == 'effectiveAmortization') {
							effectiveAmortization = parser.getDoubleValue();
						} else if (text == 'existingMortgageFlag') {
							existingMortgageFlag = parser.getText();
						} else if (text == 'firstPaymentDate') {
							firstPaymentDate = parser.getText();
						} else if (text == 'helocFlag') {
							helocFlag = parser.getText();
						} else if (text == 'insuredFlag') {
							insuredFlag = parser.getText();
						} else if (text == 'interestAdjustmentAmount') {
							interestAdjustmentAmount = parser.getDoubleValue();
						} else if (text == 'interestAdjustmentDate') {
							interestAdjustmentDate = parser.getText();
						} else if (text == 'interestCompoundDd') {
							interestCompoundDd = parser.getText();
						} else if (text == 'interestOnlyFlag') {
							interestOnlyFlag = parser.getText();
						} else if (text == 'interestTypeDd') {
							interestTypeDd = parser.getText();
						} else if (text == 'lineOfBusinessDd') {
							lineOfBusinessDd = parser.getText();
						} else if (text == 'loanTypeDd') {
							loanTypeDd = parser.getText();
						} else if (text == 'ltv') {
							ltv = parser.getDoubleValue();
						} else if (text == 'marketSubmission') {
							marketSubmission = parser.getText();
						} else if (text == 'maturityDate') {
							maturityDate = parser.getText();
						} else if (text == 'miPremiumAmount') {
							miPremiumAmount = parser.getDoubleValue();
						} else if (text == 'miPremiumPst') {
							miPremiumPst = parser.getDoubleValue();
						} else if (text == 'mortgageTypeDd') {
							mortgageTypeDd = parser.getText();
						} else if (text == 'mtgInsIncludeFlag') {
							mtgInsIncludeFlag = parser.getText();
						} else if (text == 'netLoanAmount') {
							netLoanAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmount') {
							PAndIPaymentAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmountMonthly') {
							PAndIPaymentAmountMonthly = parser.getDoubleValue();
						} else if (text == 'paymentFrequencyDd') {
							paymentFrequencyDd = parser.getText();
						} else if (text == 'paymentTermDd') {
							paymentTermDd = parser.getText();
						} else if (text == 'rate') {
							rate = new Rate(parser);
						} else if (text == 'refiBlendedAmortization') {
							refiBlendedAmortization = parser.getText();
						} else if (text == 'requestedRate') {
							requestedRate = parser.getDoubleValue();
						} else if (text == 'reverseFlag') {
							reverseFlag = parser.getText();
						} else if (text == 'singleProgressiveTypeDd') {
							singleProgressiveTypeDd = parser.getText();
						} else if (text == 'statusDd') {
							statusDd = parser.getText();
						} else if (text == 'statusDate') {
							statusDate = parser.getText();
						} else if (text == 'subprimeFlag') {
							subprimeFlag = parser.getText();
						} else if (text == 'totalLoanAmount') {
							totalLoanAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmountQualify') {
							PAndIPaymentAmountQualify = parser.getDoubleValue();
						} else if (text == 'qualifyingGds') {
							qualifyingGds = parser.getDoubleValue();
						} else if (text == 'qualifyRate') {
							qualifyRate = parser.getDecimalValue();
						} else if (text == 'qualifyingTds') {
							qualifyingTds = parser.getDoubleValue();
						} else if (text == 'qualifyDetail') {
							qualifyDetail = new QualifyDetail(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Mortgage consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Submission_Z {
		public Integer lenderSubmissionId {get;set;} 
		public String appNumber {get;set;} 
		public Integer dealId {get;set;} 
		public String extendedReviewFlag {get;set;} 
		public String firmCode {get;set;} 
		public Integer firmProfileId {get;set;} 
		public String language {get;set;} 
		public LenderProfile lenderProfile {get;set;} 
		public Integer mortgageId {get;set;} 
		public String originatorNotes {get;set;} 
		public String routingReceiver {get;set;} 
		public String routingSender {get;set;} 
		public String submissionStatusDd {get;set;} 
		public String submitRequestTime {get;set;} 
		public SubmissionAgentProfile userProfileId {get;set;} 
		public List<ConditionStatusUpdate> conditionStatusUpdate {get;set;} 
		public List<DealStatusUpdate> dealStatusUpdate {get;set;} 
		public List<Responses> responses {get;set;} 

		public Submission_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lenderSubmissionId') {
							lenderSubmissionId = parser.getIntegerValue();
						} else if (text == 'appNumber') {
							appNumber = parser.getText();
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'extendedReviewFlag') {
							extendedReviewFlag = parser.getText();
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'firmProfileId') {
							firmProfileId = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'lenderProfile') {
							lenderProfile = new LenderProfile(parser);
						} else if (text == 'mortgageId') {
							mortgageId = parser.getIntegerValue();
						} else if (text == 'originatorNotes') {
							originatorNotes = parser.getText();
						} else if (text == 'routingReceiver') {
							routingReceiver = parser.getText();
						} else if (text == 'routingSender') {
							routingSender = parser.getText();
						} else if (text == 'submissionStatusDd') {
							submissionStatusDd = parser.getText();
						} else if (text == 'submitRequestTime') {
							submitRequestTime = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = new SubmissionAgentProfile(parser);
						} else if (text == 'conditionStatusUpdate') {
							conditionStatusUpdate = arrayOfConditionStatusUpdate(parser);
						} else if (text == 'dealStatusUpdate') {
							dealStatusUpdate = arrayOfDealStatusUpdate(parser);
						} else if (text == 'responses') {
							responses = arrayOfResponses(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Submission_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Asset {
		public Integer assetId {get;set;} 
		public String assetDescription {get;set;} 
		public String assetTypeDd {get;set;} 
		public decimal assetValue {get;set;} 
		public Integer borrowerId {get;set;} 
		public Double downpaymentAmount {get;set;} 
		public String shared {get;set;} 

		public Asset(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'assetId') {
							assetId = parser.getIntegerValue();
						} else if (text == 'assetDescription') {
							assetDescription = parser.getText();
						} else if (text == 'assetTypeDd') {
							assetTypeDd = parser.getText();
						} else if (text == 'assetValue') {
							assetValue = parser.getDecimalValue();
						} else if (text == 'borrowerId') {
							borrowerId = parser.getIntegerValue();
						} else if (text == 'downpaymentAmount') {
							downpaymentAmount = parser.getDoubleValue();
						} else if (text == 'shared') {
							shared = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Asset consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ConditionStatusUpdate {
		public Integer conditionUpdateId {get;set;} 
		public Integer dealId {get;set;} 
		public String branchAddressLine {get;set;} 
		public String branchLocalFax {get;set;} 
		public String branchLocalFaxFr {get;set;} 
		public String branchLocalPhone {get;set;} 
		public String branchLocalPhoneFr {get;set;} 
		public String branchTollFreeFax {get;set;} 
		public String branchTollFreeFaxFr {get;set;} 
		public String branchTollFreePhone {get;set;} 
		public String branchTollFreePhoneFr {get;set;} 
		public String conditionTimeStamp {get;set;} 
		public String contactEmail {get;set;} 
		public String contactFax {get;set;} 
		public String contactFirstName {get;set;} 
		public String contactLastName {get;set;} 
		public String contactPhone {get;set;} 
		public String contactRole {get;set;} 
		public String contactRoleFr {get;set;} 
		public String ingestionTimeStamp {get;set;} 
		public String lenderName {get;set;} 
		public String lenderReference {get;set;} 
		public Double metDays {get;set;} 
		public String metDaysNote {get;set;} 
		public String metDaysNoteFr {get;set;} 
		public String updateFlag {get;set;} 
		public String conditionUpdateNote {get;set;}
		public List<Conditions> conditions {get;set;} 

		public ConditionStatusUpdate(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'conditionUpdateId') {
							conditionUpdateId = parser.getIntegerValue();
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'branchAddressLine') {
							branchAddressLine = parser.getText();
						} else if (text == 'branchLocalFax') {
							branchLocalFax = parser.getText();
						} else if (text == 'branchLocalFaxFr') {
							branchLocalFaxFr = parser.getText();
						} else if (text == 'branchLocalPhone') {
							branchLocalPhone = parser.getText();
						} else if (text == 'branchLocalPhoneFr') {
							branchLocalPhoneFr = parser.getText();
						} else if (text == 'branchTollFreeFax') {
							branchTollFreeFax = parser.getText();
						} else if (text == 'branchTollFreeFaxFr') {
							branchTollFreeFaxFr = parser.getText();
						} else if (text == 'branchTollFreePhone') {
							branchTollFreePhone = parser.getText();
						} else if (text == 'branchTollFreePhoneFr') {
							branchTollFreePhoneFr = parser.getText();
						} else if (text == 'conditionTimeStamp') {
							conditionTimeStamp = parser.getText();
						} else if (text == 'contactEmail') {
							contactEmail = parser.getText();
						} else if (text == 'contactFax') {
							contactFax = parser.getText();
						} else if (text == 'contactFirstName') {
							contactFirstName = parser.getText();
						} else if (text == 'contactLastName') {
							contactLastName = parser.getText();
						} else if (text == 'contactPhone') {
							contactPhone = parser.getText();
						} else if (text == 'contactRole') {
							contactRole = parser.getText();
						} else if (text == 'contactRoleFr') {
							contactRoleFr = parser.getText();
						} else if (text == 'ingestionTimeStamp') {
							ingestionTimeStamp = parser.getText();
						} else if (text == 'lenderName') {
							lenderName = parser.getText();
						} else if (text == 'lenderReference') {
							lenderReference = parser.getText();
						} else if (text == 'metDays') {
							metDays = parser.getDoubleValue();
						} else if (text == 'metDaysNote') {
							metDaysNote = parser.getText();
						} else if (text == 'metDaysNoteFr') {
							metDaysNoteFr = parser.getText();
						} else if (text == 'updateFlag') {
							updateFlag = parser.getText();
						} else if (text == 'conditions') {
							conditions = arrayOfConditions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ConditionStatusUpdate consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MortgageApplication {
		public Deal deal {get;set;} 
		public List<ApplicantGroup> applicantGroup {get;set;} 
		public List<Mortgage_Z> mortgage {get;set;} 
		public Property subjectProperty {get;set;} 
		public List<Participant> participant {get;set;} 
		public List<Notes> notes {get;set;} 
		public List<DealHistory> dealHistory {get;set;} 
		public List<WorkQueueTask> workQueueTask {get;set;} 
		public AgentProfile lastChangeByProfile {get;set;} 
		public String lastChangeDate {get;set;} 

		public MortgageApplication(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'deal') {
							deal = new Deal(parser);
						} else if (text == 'applicantGroup') {
							applicantGroup = arrayOfApplicantGroup(parser);
						} else if (text == 'mortgage') {
							mortgage = arrayOfMortgage_Z(parser);
						} else if (text == 'subjectProperty') {
							subjectProperty = new Property(parser);
						} else if (text == 'participant') {
							participant = arrayOfParticipant(parser);
						} else if (text == 'notes') {
							notes = arrayOfNotes(parser);
						} else if (text == 'dealHistory') {
							dealHistory = arrayOfDealHistory(parser);
						} else if (text == 'workQueueTask') {
							workQueueTask = arrayOfWorkQueueTask(parser);
						} else if (text == 'lastChangeByProfile') {
							lastChangeByProfile = new AgentProfile(parser);
						} else if (text == 'lastChangeDate') {
							lastChangeDate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'MortgageApplication consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Rate_Z {
		public Double applied {get;set;} 
		public Double buyDownPercent {get;set;} 
		public Double discount {get;set;} 
		public Double premiumPercent {get;set;} 
		public String rateTypeDd {get;set;} 

		public Rate_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'applied') {
							applied = parser.getDoubleValue();
						} else if (text == 'buyDownPercent') {
							buyDownPercent = parser.getDoubleValue();
						} else if (text == 'discount') {
							discount = parser.getDoubleValue();
						} else if (text == 'premiumPercent') {
							premiumPercent = parser.getDoubleValue();
						} else if (text == 'rateTypeDd') {
							rateTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Rate_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FirmProfile {
		public Contact_W contact {get;set;} 
		public String firmCode {get;set;} 
		public String firmName {get;set;} 
		public String licenseRegistrationNumber {get;set;} 

		public FirmProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_W(parser);
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'firmName') {
							firmName = parser.getText();
						} else if (text == 'licenseRegistrationNumber') {
							licenseRegistrationNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FirmProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_S {
		public Integer contactId {get;set;} 
		public Address_S address {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName_Y contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 

		public Contact_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_S(parser);
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Y(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_T {
		public Integer contactId {get;set;} 
		public Address_Y address {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName_Z contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 

		public Contact_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_Y(parser);
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Z(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Rate {
		public Double discount {get;set;} 
		public Double premium {get;set;} 
		public Double buyDownRate {get;set;} 
		public Double netRate {get;set;} 

		public Rate(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'discount') {
							discount = parser.getDoubleValue();
						} else if (text == 'premium') {
							premium = parser.getDoubleValue();
						} else if (text == 'buyDownRate') {
							buyDownRate = parser.getDoubleValue();
						} else if (text == 'netRate') {
							netRate = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Rate consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_U {
		public Integer contactId {get;set;} 
		public Address_V address {get;set;} 
		public String contactPhoneNumber {get;set;} 
		public String contactPhoneNumberExtension {get;set;} 

		public Contact_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_V(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else if (text == 'contactPhoneNumberExtension') {
							contactPhoneNumberExtension = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_V {
		public Integer contactId {get;set;} 
		public Address_X address {get;set;} 
		public String contactPhoneNumber {get;set;} 

		public Contact_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_X(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class MailingAddr {
		public Integer addrId {get;set;} 
		public String unitNumber {get;set;} 
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetTypeDd {get;set;} 
		public String streetDirectionDd {get;set;} 
		public String city {get;set;} 
		public String internationalPostalCode {get;set;} 
		public String countryTypeDd {get;set;} 
        public String provinceDd {get;set;} 
        public String postalFsa {get;set;} 
        public String postalLdu {get;set;} 
            
		public MailingAddr(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'unitNumber') {
							unitNumber = parser.getText();
						} else if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetTypeDd') {
							streetTypeDd = parser.getText();
						} else if (text == 'streetDirectionDd') {
							streetDirectionDd = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'internationalPostalCode') {
							internationalPostalCode = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'MailingAddr consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_W {
		public Integer contactId {get;set;} 
		public Address address {get;set;} 
		public String contactCellPhone {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName_Z contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 
		public String contactPhoneNumberExtension {get;set;} 
		public String languagePreferenceDd {get;set;} 
		public String preferredContactMethodDd {get;set;} 

		public Contact_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'contactCellPhone') {
							contactCellPhone = parser.getText();
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Z(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else if (text == 'contactPhoneNumberExtension') {
							contactPhoneNumberExtension = parser.getText();
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_X {
		public Integer contactId {get;set;} 
		public Address_Z address {get;set;} 
		public String contactCellPhone {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName_Z contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 
		public String languagePreferenceDd {get;set;} 
		public String preferredContactMethodDd {get;set;} 

		public Contact_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_Z(parser);
						} else if (text == 'contactCellPhone') {
							contactCellPhone = parser.getText();
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Z(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_Y {
		public Integer contactId {get;set;} 
		public Address address {get;set;} 
		public String contactEmailAddress {get;set;} 
		public ContactName_Z contactName {get;set;} 
		public String languagePreferenceDd {get;set;} 
		public String preferredContactMethodDd {get;set;} 

		public Contact_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Z(parser);
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_Z {
		public Integer contactId {get;set;} 
		public Address_Z address {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName_Z contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 
		public String languagePreferenceDd {get;set;} 
		public String preferredContactMethodDd {get;set;} 

		public Contact_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getIntegerValue();
						} else if (text == 'address') {
							address = new Address_Z(parser);
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName_Z(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Deal {
		public Integer dealId {get;set;} 
		public Integer copyId {get;set;} 
		public String copyType {get;set;} 
		public AgentProfile agentProfile {get;set;} 
		public SubmissionAgentProfile submissionAgentProfile {get;set;} 
		public AdministratorProfile administratorProfile {get;set;} 
		public SubmissionAgentProfile assistantProfile {get;set;} 
		public SubmissionAgentProfile associateProfile {get;set;} 
		public Co_agentProfile co_agentProfile {get;set;} // in json: co-agentProfile
		public SubmissionAgentProfile reviewerProfile {get;set;} 
		public SubmissionAgentProfile referringAgentProfile {get;set;} 
		public String applicationDate {get;set;} 
		public String applicationId {get;set;} 
		public Double combinedGds {get;set;} 
		public Double combinedLtv {get;set;} 
		public Double combinedTds {get;set;} 
		public String dealPurposeDd {get;set;} 
		public String dealTypeDd {get;set;} 
		public Double refiImprovementAmount {get;set;}
		public String thirdPartyApplicationFlag {get;set;}
		public String refiImprovementsDesc {get;set;}
		public List<DownPaymentSource> downPaymentSource {get;set;} 
		public String estimatedClosingDate {get;set;} 
		public FirmProfile firmProfile {get;set;} 
		public String financingWaiverDate {get;set;} 
		public String referralReferenceNo {get;set;} 
		public String refiImprovementsFlag {get;set;} 
		public String refiPurpose {get;set;} 
		public String sourceApplicationId {get;set;} 
		public String statusDate {get;set;} 
		public String statusDd {get;set;} 
		public String taxPayorDd {get;set;} 

		public Deal(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'copyId') {
							copyId = parser.getIntegerValue();
						} else if (text == 'copyType') {
							copyType = parser.getText();
						} else if (text == 'agentProfile') {
							agentProfile = new AgentProfile(parser);
						} else if (text == 'submissionAgentProfile') {
							submissionAgentProfile = new SubmissionAgentProfile(parser);
						} else if (text == 'administratorProfile') {
							administratorProfile = new AdministratorProfile(parser);
						} else if (text == 'assistantProfile') {
							assistantProfile = new SubmissionAgentProfile(parser);
						} else if (text == 'associateProfile') {
							associateProfile = new SubmissionAgentProfile(parser);
						} else if (text == 'co-agentProfile') {
							co_agentProfile = new Co_agentProfile(parser);
						} else if (text == 'reviewerProfile') {
							reviewerProfile = new SubmissionAgentProfile(parser);
						} else if (text == 'referringAgentProfile') {
							referringAgentProfile = new SubmissionAgentProfile(parser);
						} else if (text == 'applicationDate') {
							applicationDate = parser.getText();
						} else if (text == 'applicationId') {
							applicationId = parser.getText();
						} else if (text == 'combinedGds') {
							combinedGds = parser.getDoubleValue();
						} else if (text == 'combinedLtv') {
							combinedLtv = parser.getDoubleValue();
						} else if (text == 'combinedTds') {
							combinedTds = parser.getDoubleValue();
						} else if (text == 'dealPurposeDd') {
							dealPurposeDd = parser.getText();
						} else if (text == 'dealTypeDd') {
							dealTypeDd = parser.getText();
						} else if (text == 'downPaymentSource') {
							downPaymentSource = arrayOfDownPaymentSource(parser);
						} else if (text == 'estimatedClosingDate') {
							estimatedClosingDate = parser.getText();
						} else if (text == 'firmProfile') {
							firmProfile = new FirmProfile(parser);
						} else if (text == 'financingWaiverDate') {
							financingWaiverDate = parser.getText();
						} else if (text == 'referralReferenceNo') {
							referralReferenceNo = parser.getText();
						} else if (text == 'refiImprovementsFlag') {
							refiImprovementsFlag = parser.getText();
						} else if (text == 'refiPurpose') {
							refiPurpose = parser.getText();
						} else if (text == 'sourceApplicationId') {
							sourceApplicationId = parser.getText();
						} else if (text == 'statusDate') {
							statusDate = parser.getText();
						} else if (text == 'statusDd') {
							statusDd = parser.getText();
						} else if (text == 'taxPayorDd') {
							taxPayorDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Deal consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OfficeList {
		public Address_U address {get;set;} 
		public Double loanDecisionId {get;set;} 
		public Integer officeId {get;set;} 
		public String officeName {get;set;} 
		public String officeType {get;set;}
		public Phone phone {get;set;} 
		public String email {get;set;} 
		public List<RepresentativeList> representativeList {get;set;} 

		public OfficeList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address_U(parser);
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getDoubleValue();
						} else if (text == 'officeId') {
							officeId = parser.getIntegerValue();
						} else if (text == 'officeName') {
							officeName = parser.getText();
						} else if (text == 'representativeList') {
							representativeList = arrayOfRepresentativeList(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'OfficeList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Responses {
		public List<AdjustmentList> adjustmentList {get;set;} 
		public List<ApplicantList> applicantList {get;set;} 
		public List<ClauseList> clauseList {get;set;} 
		public List<DocumentList> documentList {get;set;} 
		public List<OfficeList> officeList {get;set;} 
		public List<SubjectPropertyList> subjectPropertyList {get;set;} 
		public String appVersion {get;set;} 
		public Description approvalType {get;set;} 
		public String commitExpiryDate {get;set;} 
		public Description commitType {get;set;} 
		public Integer amortMonths {get;set;} 
		public Description interestComp {get;set;} 
		public Double basicLoanAmt {get;set;} 
		public Description loanType {get;set;} 
		public Double cashBackAmount {get;set;} 
		public Double cashBackPercent {get;set;} 
		public String closingDate {get;set;} 
		public Double equity {get;set;} 
		public Description insurer {get;set;} 
		public String productCode {get;set;} 
		public Description progressAdvance {get;set;} 
		public Double purchasePrice {get;set;} 
		public Description purpose {get;set;} 
		public Description taxesPaidBy {get;set;} 
		public Description paymentFreq {get;set;} 
		public Double pmtAmt {get;set;} 
		public Rate_Z rate {get;set;} 
		public String prePayPrivs {get;set;}
		public String serviceBranchTransit {get;set;}
		public String surveyRequired {get;set;}
		public String totalLoanAmt {get;set;}
		public String affiliationGroup {get;set;}
		public String aigRefNum {get;set;}
		public String appNum {get;set;}
		public String bidSummary {get;set;}
		public String cmhcRefNum {get;set;}
		public String decisionVersion {get;set;}
		public Decline decline {get;set;}
		public String gemiRefNum {get;set;}
		public String marketType {get;set;}
		public String miPolicyNumber {get;set;}
		public String offlineSubmitFlag {get;set;}
		public String otherMortgage {get;set;}
		public String brokerCommission {get;set;}
		public Description repaymentType {get;set;} 
		public Integer termMonths {get;set;} 
		public Description termType {get;set;} 
		public String offerExpiryDate {get;set;} 
		public Double rateHoldDays {get;set;} 
		public String decisionDate {get;set;} 
		public Description language {get;set;} 
		public String lenderRefNum {get;set;} 
		public Integer lenderSubmissionId {get;set;} 
		public Integer loanDecisionId {get;set;} 
		public String responseTime {get;set;} 
		public Routing routing {get;set;} 
		public List<PendingMessages> pendingMessages {get;set;}

		public Responses(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'adjustmentList') {
							adjustmentList = arrayOfAdjustmentList(parser);
						} else if (text == 'applicantList') {
							applicantList = arrayOfApplicantList(parser);
						} else if (text == 'clauseList') {
							clauseList = arrayOfClauseList(parser);
						} else if (text == 'documentList') {
							documentList = arrayOfDocumentList(parser);
						} else if (text == 'officeList') {
							officeList = arrayOfOfficeList(parser);
						} else if (text == 'subjectPropertyList') {
							subjectPropertyList = arrayOfSubjectPropertyList(parser);
						} else if (text == 'appVersion') {
							appVersion = parser.getText();
						} else if (text == 'approvalType') {
							approvalType = new Description(parser);
						} else if (text == 'commitExpiryDate') {
							commitExpiryDate = parser.getText();
						} else if (text == 'commitType') {
							commitType = new Description(parser);
						} else if (text == 'amortMonths') {
							amortMonths = parser.getIntegerValue();
						} else if (text == 'interestComp') {
							interestComp = new Description(parser);
						} else if (text == 'basicLoanAmt') {
							basicLoanAmt = parser.getDoubleValue();
						} else if (text == 'loanType') {
							loanType = new Description(parser);
						} else if (text == 'cashBackAmount') {
							cashBackAmount = parser.getDoubleValue();
						} else if (text == 'cashBackPercent') {
							cashBackPercent = parser.getDoubleValue();
						} else if (text == 'closingDate') {
							closingDate = parser.getText();
						} else if (text == 'equity') {
							equity = parser.getDoubleValue();
						} else if (text == 'insurer') {
							insurer = new Description(parser);
						} else if (text == 'productCode') {
							productCode = parser.getText();
						} else if (text == 'progressAdvance') {
							progressAdvance = new Description(parser);
						} else if (text == 'purchasePrice') {
							purchasePrice = parser.getDoubleValue();
						} else if (text == 'purpose') {
							purpose = new Description(parser);
						} else if (text == 'taxesPaidBy') {
							taxesPaidBy = new Description(parser);
						} else if (text == 'paymentFreq') {
							paymentFreq = new Description(parser);
						} else if (text == 'pmtAmt') {
							pmtAmt = parser.getDoubleValue();
						} else if (text == 'rate') {
							rate = new Rate_Z(parser);
						} else if (text == 'repaymentType') {
							repaymentType = new Description(parser);
						} else if (text == 'termMonths') {
							termMonths = parser.getIntegerValue();
						} else if (text == 'termType') {
							termType = new Description(parser);
						} else if (text == 'offerExpiryDate') {
							offerExpiryDate = parser.getText();
						} else if (text == 'rateHoldDays') {
							rateHoldDays = parser.getDoubleValue();
						} else if (text == 'decisionDate') {
							decisionDate = parser.getText();
						} else if (text == 'language') {
							language = new Description(parser);
						} else if (text == 'lenderRefNum') {
							lenderRefNum = parser.getText();
						} else if (text == 'lenderSubmissionId') {
							lenderSubmissionId = parser.getIntegerValue();
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else if (text == 'responseTime') {
							responseTime = parser.getText();
						} else if (text == 'routing') {
							routing = new Routing(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Responses consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class PendingMessages{
		public Integer loanDecisionId {get;set;} 
		public String message {get;set;} 
		public Integer pendingMessageId {get;set;} 
	}

	public class Decline {
		public String reason {get;set;} 
		public FeesPmtMethod autoDeclinedFlag {get;set;}
	}

	public class mtgProd{
		public string mpBusinessId {get; set;}
	}

	public class pricingRateInventory{
		public string indexEffectiveDate {get; set;}
	}

	public class Mortgage_Z {
		public Integer mortgageId {get;set;} 
		public List<BorrowerIds> borrowerIds {get;set;} 
		public Integer dealId {get;set;} 
		public String lenderResponseId {get;set;} 
		public Double actualPaymentTerm {get;set;} 
		public Double amortizationTerm {get;set;} 
		public Double balanceRemaining {get;set;} 
		public Double cashBackAmt {get;set;} 
		public String cashBackOverride {get;set;} 
		public Double cashBackPercentage {get;set;} 
		public String commercialFlag {get;set;} 
		public String constructionFlag {get;set;} 
		public Double effectiveAmortization {get;set;} 
		public String existingMortgageFlag {get;set;} 
		public String firstPaymentDate {get;set;} 
		public String helocFlag {get;set;} 
		public String insuredFlag {get;set;} 
		public Double interestAdjustmentAmount {get;set;} 
		public String interestAdjustmentDate {get;set;} 
		public String interestCompoundDd {get;set;} 
		public String interestOnlyFlag {get;set;} 
		public String interestTypeDd {get;set;} 
		public String lineOfBusinessDd {get;set;} 
		public String loanTypeDd {get;set;} 
		public Double ltv {get;set;} 
		public String marketSubmission {get;set;} 
		public String maturityDate {get;set;} 
		public Double miPremiumAmount {get;set;} 
		public Double miPremiumPst {get;set;} 
		public String mortgageTypeDd {get;set;} 
		public String mtgInsIncludeFlag {get;set;} 
		public Double netLoanAmount {get;set;} 
		public Double PAndIPaymentAmount {get;set;} 
		public Double PAndIPaymentAmountMonthly {get;set;} 
		public String paymentFrequencyDd {get;set;} 
		public String paymentTermDd {get;set;} 
		public Rate rate {get;set;} 
		public String refiBlendedAmortization {get;set;} 
		public Double requestedRate {get;set;} 
		public String reverseFlag {get;set;} 
		public String singleProgressiveTypeDd {get;set;} 
		public String statusDd {get;set;} 
		public String statusDate {get;set;} 
		public String subprimeFlag {get;set;} 
		public Double totalLoanAmount {get;set;} 
		public Double PAndIPaymentAmountQualify {get;set;} 
		public Double qualifyingGds {get;set;} 
		public Decimal qualifyRate {get;set;} 
		public Double qualifyingTds {get;set;} 
		public QualifyDetail qualifyDetail {get;set;} 
		public List<Fees> fees {get;set;} 
		public List<Submissions> submissions {get;set;}
		/*Added by Zain Abbas - Start*/
		public string currentMortgageNumber {get; set;}
		//public decimal effectiveAmortization {get;set;}
		public string existingMortgageHolder {get; set;}
		//public string lenderResponseId {get; set;}
		public string lenderSubmissionId {get; set;}
		public string locRepaymentTypeDd {get; set;}
		public decimal marketSubmissionNumber {get; set;}
		public string miReferenceNumber {get; set;}
		public string mortgageInsurerId {get; set;}
		public mtgProd mtgProd {get; set;}
		public string mtgProductId {get; set;}
		public string mtgProviderId {get; set;}
		public string payoffTypeDd {get; set;}
		public pricingRateInventory pricingRateInventory {get; set;}
		public double rateGuaranteeLength {get; set;}
		public string refiAdditionalInformation {get; set;}
		public string repaymentTypeDd {get; set;}
		public double originalMortgageAmount {get; set;}
		/*Added by Zain Abbas - End*/
		
		public Mortgage_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'mortgageId') {
							mortgageId = parser.getIntegerValue();
						} else if (text == 'borrowerIds') {
							borrowerIds = arrayOfBorrowerIds(parser);
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'lenderResponseId') {
							lenderResponseId = parser.getText();
						} else if (text == 'actualPaymentTerm') {
							actualPaymentTerm = parser.getDoubleValue();
						} else if (text == 'amortizationTerm') {
							amortizationTerm = parser.getDoubleValue();
						} else if (text == 'balanceRemaining') {
							balanceRemaining = parser.getDoubleValue();
						} else if (text == 'cashBackAmt') {
							cashBackAmt = parser.getDoubleValue();
						} else if (text == 'cashBackOverride') {
							cashBackOverride = parser.getText();
						} else if (text == 'cashBackPercentage') {
							cashBackPercentage = parser.getDoubleValue();
						} else if (text == 'commercialFlag') {
							commercialFlag = parser.getText();
						} else if (text == 'constructionFlag') {
							constructionFlag = parser.getText();
						} else if (text == 'effectiveAmortization') {
							effectiveAmortization = parser.getDoubleValue();
						} else if (text == 'existingMortgageFlag') {
							existingMortgageFlag = parser.getText();
						} else if (text == 'firstPaymentDate') {
							firstPaymentDate = parser.getText();
						} else if (text == 'helocFlag') {
							helocFlag = parser.getText();
						} else if (text == 'insuredFlag') {
							insuredFlag = parser.getText();
						} else if (text == 'interestAdjustmentAmount') {
							interestAdjustmentAmount = parser.getDoubleValue();
						} else if (text == 'interestAdjustmentDate') {
							interestAdjustmentDate = parser.getText();
						} else if (text == 'interestCompoundDd') {
							interestCompoundDd = parser.getText();
						} else if (text == 'interestOnlyFlag') {
							interestOnlyFlag = parser.getText();
						} else if (text == 'interestTypeDd') {
							interestTypeDd = parser.getText();
						} else if (text == 'lineOfBusinessDd') {
							lineOfBusinessDd = parser.getText();
						} else if (text == 'loanTypeDd') {
							loanTypeDd = parser.getText();
						} else if (text == 'ltv') {
							ltv = parser.getDoubleValue();
						} else if (text == 'marketSubmission') {
							marketSubmission = parser.getText();
						} else if (text == 'maturityDate') {
							maturityDate = parser.getText();
						} else if (text == 'miPremiumAmount') {
							miPremiumAmount = parser.getDoubleValue();
						} else if (text == 'miPremiumPst') {
							miPremiumPst = parser.getDoubleValue();
						} else if (text == 'mortgageTypeDd') {
							mortgageTypeDd = parser.getText();
						} else if (text == 'mtgInsIncludeFlag') {
							mtgInsIncludeFlag = parser.getText();
						} else if (text == 'netLoanAmount') {
							netLoanAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmount') {
							PAndIPaymentAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmountMonthly') {
							PAndIPaymentAmountMonthly = parser.getDoubleValue();
						} else if (text == 'paymentFrequencyDd') {
							paymentFrequencyDd = parser.getText();
						} else if (text == 'paymentTermDd') {
							paymentTermDd = parser.getText();
						} else if (text == 'rate') {
							rate = new Rate(parser);
						} else if (text == 'refiBlendedAmortization') {
							refiBlendedAmortization = parser.getText();
						} else if (text == 'requestedRate') {
							requestedRate = parser.getDoubleValue();
						} else if (text == 'reverseFlag') {
							reverseFlag = parser.getText();
						} else if (text == 'singleProgressiveTypeDd') {
							singleProgressiveTypeDd = parser.getText();
						} else if (text == 'statusDd') {
							statusDd = parser.getText();
						} else if (text == 'statusDate') {
							statusDate = parser.getText();
						} else if (text == 'subprimeFlag') {
							subprimeFlag = parser.getText();
						} else if (text == 'totalLoanAmount') {
							totalLoanAmount = parser.getDoubleValue();
						} else if (text == 'PAndIPaymentAmountQualify') {
							PAndIPaymentAmountQualify = parser.getDoubleValue();
						} else if (text == 'qualifyingGds') {
							qualifyingGds = parser.getDoubleValue();
						} else if (text == 'qualifyRate') {
							qualifyRate = parser.getDecimalValue();
						} else if (text == 'qualifyingTds') {
							qualifyingTds = parser.getDoubleValue();
						} else if (text == 'qualifyDetail') {
							qualifyDetail = new QualifyDetail(parser);
						} else if (text == 'fees') {
							fees = arrayOfFees(parser);
						} else if (text == 'submissions') {
							submissions = arrayOfSubmissions(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Mortgage_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Participant {
		public Contact_S contact {get;set;} 
		public String notes {get;set;} 
		public String partyCompanyName {get;set;} 
		public Integer partyProfileId {get;set;} 
		public String partyTypeDd {get;set;} 
		public String url {get;set;}

		public Participant(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_S(parser);
						} else if (text == 'notes') {
							notes = parser.getText();
						} else if (text == 'partyCompanyName') {
							partyCompanyName = parser.getText();
						} else if (text == 'partyProfileId') {
							partyProfileId = parser.getIntegerValue();
						} else if (text == 'partyTypeDd') {
							partyTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Participant consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_U {
		public String city {get;set;} 
		public String postalZipCode {get;set;} 
		public Description provState {get;set;} 
		public String streetAddr1 {get;set;} 
		public String streetAddr2 {get;set;} 

		public Address_U(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'city') {
							city = parser.getText();
						} else if (text == 'postalZipCode') {
							postalZipCode = parser.getText();
						} else if (text == 'provState') {
							provState = new Description(parser);
						} else if (text == 'streetAddr1') {
							streetAddr1 = parser.getText();
						} else if (text == 'streetAddr2') {
							streetAddr2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_U consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_V {
		public Integer addrId {get;set;} 
		public String addressLine1 {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 
		public String city {get;set;} 
		public String countryTypeDd {get;set;} 
		public String provinceDd {get;set;}

		public Address_V(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'addressLine1') {
							addressLine1 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else if (text == 'provinceDd') {
							provinceDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_V consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DealStatus {
		public Integer dealStatusId {get;set;} 
		public Integer dealStatusUpdateId {get;set;} 
		public String statusText {get;set;} 
		public String statusTextFr {get;set;} 
		public String statusType {get;set;} 
		public Integer statusTypeDd {get;set;} 
		public String statusTypeFr {get;set;} 

		public DealStatus(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dealStatusId') {
							dealStatusId = parser.getIntegerValue();
						} else if (text == 'dealStatusUpdateId') {
							dealStatusUpdateId = parser.getIntegerValue();
						} else if (text == 'statusText') {
							statusText = parser.getText();
						} else if (text == 'statusTextFr') {
							statusTextFr = parser.getText();
						} else if (text == 'statusType') {
							statusType = parser.getText();
						} else if (text == 'statusTypeDd') {
							statusTypeDd = parser.getIntegerValue();
						} else if (text == 'statusTypeFr') {
							statusTypeFr = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'DealStatus consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_S {
		public Integer addrId {get;set;} 
		public String addressLine1 {get;set;} 
		public String addressLine2 {get;set;} 
		public String city {get;set;} 
		public String provinceDd {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 
		public String countryTypeDd {get;set;} 

		public Address_S(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'addressLine1') {
							addressLine1 = parser.getText();
						} else if (text == 'addressLine2') {
							addressLine2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'provinceDd') {
							provinceDd = parser.getText();
						} else if (text == 'postalFsa') {
							postalFsa = parser.getText();
						} else if (text == 'postalLdu') {
							postalLdu = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_S consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_T {
		public String city {get;set;} 
		public String postalZipCode {get;set;} 
		public Description provState {get;set;} 
		public String streetAddr1 {get;set;} 
		public FeesPmtMethod streetDir {get;set;} 
		public String streetNum {get;set;} 
		public FeesPmtMethod streetType {get;set;} 
		public String unit {get;set;} 

		public Address_T(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'city') {
							city = parser.getText();
						} else if (text == 'postalZipCode') {
							postalZipCode = parser.getText();
						} else if (text == 'provState') {
							provState = new Description(parser);
						} else if (text == 'streetAddr1') {
							streetAddr1 = parser.getText();
						} else if (text == 'streetDir') {
							streetDir = new FeesPmtMethod(parser);
						} else if (text == 'streetNum') {
							streetNum = parser.getText();
						} else if (text == 'streetType') {
							streetType = new FeesPmtMethod(parser);
						} else if (text == 'unit') {
							unit = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_T consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_Y {
		public Integer addrId {get;set;} 
		public String unitNumber {get;set;} 
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetTypeDd {get;set;} 
		public String streetDirectionDd {get;set;} 
		public String city {get;set;} 
		public String provinceDd {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 
		public String countryTypeDd {get;set;} 

		public Address_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'unitNumber') {
							unitNumber = parser.getText();
						} else if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetTypeDd') {
							streetTypeDd = parser.getText();
						} else if (text == 'streetDirectionDd') {
							streetDirectionDd = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'provinceDd') {
							provinceDd = parser.getText();
						} else if (text == 'postalFsa') {
							postalFsa = parser.getText();
						} else if (text == 'postalLdu') {
							postalLdu = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_Z {
		public Integer addrId {get;set;} 
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetTypeDd {get;set;} 
		public String city {get;set;} 
		public String provinceDd {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 

		public Address_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetTypeDd') {
							streetTypeDd = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'provinceDd') {
							provinceDd = parser.getText();
						} else if (text == 'postalFsa') {
							postalFsa = parser.getText();
						} else if (text == 'postalLdu') {
							postalLdu = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Applicant {
		public Integer borrowerId {get;set;} 
		public String borrowerCellNumber {get;set;} 
		public String borrowerFaxNumber {get;set;} 
		public String borrowerHomePhoneNumber {get;set;} 
		public Integer borrowerSpouseId {get;set;} 
		public String borrowerWorkPhoneExtension {get;set;} 
		public String borrowerWorkPhoneNumber {get;set;} 
		public String birthDate {get;set;} 
        public String emailAddress {get;set;}
		public String languagePreferenceDd {get;set;} 
		public String maritalStatusDd {get;set;} 
		public Name name {get;set;} 
		public Integer numberOfDependents {get;set;} 
		public String preferredContactMethodDd {get;set;} 
		public String socialInsuranceNumber {get;set;} 
		public List<AddressDetail> addressDetail {get;set;} 
		public String clientReferenceNumber {get;set;} 
		public String existingClient {get;set;} 
		public String firstTimeBuyer {get;set;} 
		public List<Identification> identification {get;set;} 
		public Double pairOrder {get;set;} 
		public String primaryApplicantFlag {get;set;} 
		public String relationshipToPrimaryApplicant {get;set;} 
		public List<EmploymentHistory> employmentHistory {get;set;} 
		public List<OtherIncome> otherIncome {get;set;} 
		public List<Asset> asset {get;set;} 
		public List<Liability> liability {get;set;} 
		public List<OtherProperty> otherProperty {get;set;}
		/*Added by Zain - Start*/
		public string bankruptcyStatusDd {get; set;}
		public string citizenshipTypeDd {get; set;}
		public decimal creditScore {get; set;}
		public string currentAddressSameAs {get; set;}
		public string employeeNumber {get; set;}
		public string gender {get; set;}
		public string isEmployeeDd {get; set;}
		public string smokerDd {get; set;}
		public string solicitationDd {get; set;}
		/*Added by Zain - End*/
		public Applicant(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'borrowerId') {
							borrowerId = parser.getIntegerValue();
						} else if (text == 'borrowerCellNumber') {
							borrowerCellNumber = parser.getText();
						} else if (text == 'borrowerFaxNumber') {
							borrowerFaxNumber = parser.getText();
						} else if (text == 'borrowerHomePhoneNumber') {
							borrowerHomePhoneNumber = parser.getText();
						} else if (text == 'borrowerSpouseId') {
							borrowerSpouseId = parser.getIntegerValue();
						} else if (text == 'borrowerWorkPhoneExtension') {
							borrowerWorkPhoneExtension = parser.getText();
						} else if (text == 'borrowerWorkPhoneNumber') {
							borrowerWorkPhoneNumber = parser.getText();
						} else if (text == 'birthDate') {
							birthDate = parser.getText();
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'maritalStatusDd') {
							maritalStatusDd = parser.getText();
						} else if (text == 'name') {
							name = new Name(parser);
						} else if (text == 'numberOfDependents') {
							numberOfDependents = parser.getIntegerValue();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else if (text == 'socialInsuranceNumber') {
							socialInsuranceNumber = parser.getText();
						} else if (text == 'addressDetail') {
							addressDetail = arrayOfAddressDetail(parser);
						} else if (text == 'clientReferenceNumber') {
							clientReferenceNumber = parser.getText();
						} else if (text == 'existingClient') {
							existingClient = parser.getText();
						} else if (text == 'firstTimeBuyer') {
							firstTimeBuyer = parser.getText();
						} else if (text == 'identification') {
							identification = arrayOfIdentification(parser);
						} else if (text == 'pairOrder') {
							pairOrder = parser.getDoubleValue();
						} else if (text == 'primaryApplicantFlag') {
							primaryApplicantFlag = parser.getText();
						} else if (text == 'relationshipToPrimaryApplicant') {
							relationshipToPrimaryApplicant = parser.getText();
						} else if (text == 'employmentHistory') {
							employmentHistory = arrayOfEmploymentHistory(parser);
						} else if (text == 'otherIncome') {
							otherIncome = arrayOfOtherIncome(parser);
						} else if (text == 'asset') {
							asset = arrayOfAsset(parser);
						} else if (text == 'liability') {
							liability = arrayOfLiability(parser);
						} else if (text == 'otherProperty') {
							otherProperty = arrayOfOtherProperty(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Applicant consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_W {
		public String unitNumber {get;set;} 
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetTypeDd {get;set;} 
		public String streetDirectionDd {get;set;} 
		public String city {get;set;} 
		public String provinceDd {get;set;}
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 
		public String countryTypeDd {get;set;} 

		public Address_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'unitNumber') {
							unitNumber = parser.getText();
						} else if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetTypeDd') {
							streetTypeDd = parser.getText();
						} else if (text == 'streetDirectionDd') {
							streetDirectionDd = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'provid') {
							city = parser.getText();
						} else if (text == 'postalFsa') {
							postalFsa = parser.getText();
						} else if (text == 'postalLdu') {
							postalLdu = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address_X {
		public Integer addrId {get;set;} 
		public String addressLine1 {get;set;} 
		public String addressLine2 {get;set;} 
		public String postalFsa {get;set;} 
		public String postalLdu {get;set;} 
		public String city {get;set;} 
		public String internationalPostalCode {get;set;} 
		public String countryTypeDd {get;set;} 
		public String provinceDd {get;set;} 

		public Address_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'addrId') {
							addrId = parser.getIntegerValue();
						} else if (text == 'addressLine1') {
							addressLine1 = parser.getText();
						} else if (text == 'addressLine2') {
							addressLine2 = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'internationalPostalCode') {
							internationalPostalCode = parser.getText();
						} else if (text == 'countryTypeDd') {
							countryTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Building {
		public FeesPmtMethod type_Z {get;set;} // in json: type

		public Building(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = new FeesPmtMethod(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Building consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Description {
		public String code {get;set;} 

		public Description(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Description consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RepresentativeList {
		public Address_U address {get;set;} 
		public String email {get;set;} 
		public Name_X name {get;set;} 
		public Integer officeId {get;set;} 
		public Phone phone {get;set;} 
		public Phone fax {get;set;} 
		public String representativeCode {get;set;} 
		public Integer representativeId {get;set;} 
		public Description role {get;set;} 

		public RepresentativeList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address_U(parser);
						} else if (text == 'email') {
							email = parser.getText();
						} else if (text == 'name') {
							name = new Name_X(parser);
						} else if (text == 'officeId') {
							officeId = parser.getIntegerValue();
						} else if (text == 'phone') {
							phone = new Phone(parser);
						} else if (text == 'representativeId') {
							representativeId = parser.getIntegerValue();
						} else if (text == 'role') {
							role = new Description(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'RepresentativeList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SubmissionAgentProfile {
		public Contact_Z contact {get;set;} 
		public String firmCode {get;set;} 
		public String licenseRegistrationNumber {get;set;} 
		public String profileStatusDd {get;set;} 
		public String userLogin {get;set;} 
		public Integer userProfileId {get;set;} 
		public String userTypeDd {get;set;} 

		public SubmissionAgentProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_Z(parser);
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'licenseRegistrationNumber') {
							licenseRegistrationNumber = parser.getText();
						} else if (text == 'profileStatusDd') {
							profileStatusDd = parser.getText();
						} else if (text == 'userLogin') {
							userLogin = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = parser.getIntegerValue();
						} else if (text == 'userTypeDd') {
							userTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'SubmissionAgentProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Identification {
		public Integer borrowerId {get;set;} 
		public Integer identificationId {get;set;} 
		public String identificationCountry {get;set;} 
		public String identificationTypeDd {get;set;} 
		public String identificationNumber {get;set;}

		public Identification(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'borrowerId') {
							borrowerId = parser.getIntegerValue();
						} else if (text == 'identificationId') {
							identificationId = parser.getIntegerValue();
						} else if (text == 'identificationCountry') {
							identificationCountry = parser.getText();
						} else if (text == 'identificationTypeDd') {
							identificationTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Identification consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class PropertyExpense {
		public Integer propertyExpenseId {get;set;} 
		public String includeInGDS {get;set;} 
		public String includeInTDS {get;set;} 
		public Double monthlyExpenseAmount {get;set;} 
		public Double percentInGDS {get;set;} 
		public Double percentInTDS {get;set;} 
		public Double propertyExpenseAmount {get;set;} 
		public String propertyExpensePeriodDd {get;set;} 
		public String propertyExpenseTypeDd {get;set;} 

		public PropertyExpense(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'propertyExpenseId') {
							propertyExpenseId = parser.getIntegerValue();
						} else if (text == 'includeInGDS') {
							includeInGDS = parser.getText();
						} else if (text == 'includeInTDS') {
							includeInTDS = parser.getText();
						} else if (text == 'monthlyExpenseAmount') {
							monthlyExpenseAmount = parser.getDoubleValue();
						} else if (text == 'percentInGDS') {
							percentInGDS = parser.getDoubleValue();
						} else if (text == 'percentInTDS') {
							percentInTDS = parser.getDoubleValue();
						} else if (text == 'propertyExpenseAmount') {
							propertyExpenseAmount = parser.getDoubleValue();
						} else if (text == 'propertyExpensePeriodDd') {
							propertyExpensePeriodDd = parser.getText();
						} else if (text == 'propertyExpenseTypeDd') {
							propertyExpenseTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'PropertyExpense consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AgentProfile {
		public Contact contact {get;set;} 
		public String firmCode {get;set;} 
		public String licenseRegistrationNumber {get;set;} 
		public String profileStatusDd {get;set;} 
		public String userLogin {get;set;} 
		public Integer userProfileId {get;set;} 
		public String userTypeDd {get;set;} 

		public AgentProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact(parser);
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'licenseRegistrationNumber') {
							licenseRegistrationNumber = parser.getText();
						} else if (text == 'profileStatusDd') {
							profileStatusDd = parser.getText();
						} else if (text == 'userLogin') {
							userLogin = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = parser.getIntegerValue();
						} else if (text == 'userTypeDd') {
							userTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AgentProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DownPaymentSource {
		public Double amount {get;set;} 
		public String description {get;set;} 
		public Integer downPaymentSourceId {get;set;} 
		public String downPaymentSourceTypeDd {get;set;} 

		public DownPaymentSource(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getDoubleValue();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'downPaymentSourceId') {
							downPaymentSourceId = parser.getIntegerValue();
						} else if (text == 'downPaymentSourceTypeDd') {
							downPaymentSourceTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'DownPaymentSource consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AdjustmentList {
		public Integer adjustmentId {get;set;} 
		public Double amt {get;set;} 
		public Description description {get;set;} 
		public FeesPmtMethod feesPmtMethod {get;set;} 
		public Integer loanDecisionId {get;set;} 

		public AdjustmentList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'adjustmentId') {
							adjustmentId = parser.getIntegerValue();
						} else if (text == 'amt') {
							amt = parser.getDoubleValue();
						} else if (text == 'description') {
							description = new Description(parser);
						} else if (text == 'feesPmtMethod') {
							feesPmtMethod = new FeesPmtMethod(parser);
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'AdjustmentList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EmploymentHistory_Z {
		public Integer employmentHistoryId {get;set;} 
		public Contact_U contact {get;set;} 
		public String employerName {get;set;} 
		public String employmentHistoryStatusDd {get;set;} 
		public String employmentHistoryTypeDd {get;set;} 
		public Income income {get;set;} 
		public String industrySectorDd {get;set;} 
		public String jobTitle {get;set;} 
		public Integer monthsOfService {get;set;} 
		public String occupationDd {get;set;} 
		public Double timeInIndustry {get;set;} 

		public EmploymentHistory_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'employmentHistoryId') {
							employmentHistoryId = parser.getIntegerValue();
						} else if (text == 'contact') {
							contact = new Contact_U(parser);
						} else if (text == 'employerName') {
							employerName = parser.getText();
						} else if (text == 'employmentHistoryStatusDd') {
							employmentHistoryStatusDd = parser.getText();
						} else if (text == 'employmentHistoryTypeDd') {
							employmentHistoryTypeDd = parser.getText();
						} else if (text == 'income') {
							income = new Income(parser);
						} else if (text == 'industrySectorDd') {
							industrySectorDd = parser.getText();
						} else if (text == 'jobTitle') {
							jobTitle = parser.getText();
						} else if (text == 'monthsOfService') {
							monthsOfService = parser.getIntegerValue();
						} else if (text == 'occupationDd') {
							occupationDd = parser.getText();
						} else if (text == 'timeInIndustry') {
							timeInIndustry = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'EmploymentHistory_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AddressDetail {
		public Address_Y address {get;set;} 
		public String addressTypeDd {get;set;} 
		public Integer monthsAtAddress {get;set;} 
		public String residentialStatusDd {get;set;} 
		public Double rentPaymentAmount {get;set;} 

		public AddressDetail(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address_Y(parser);
						} else if (text == 'addressTypeDd') {
							addressTypeDd = parser.getText();
						} else if (text == 'monthsAtAddress') {
							monthsAtAddress = parser.getIntegerValue();
						} else if (text == 'residentialStatusDd') {
							residentialStatusDd = parser.getText();
						} else if (text == 'rentPaymentAmount') {
							rentPaymentAmount = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'AddressDetail consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Phone {
		public String areaCode {get;set;} 
		public String number_Z {get;set;} // in json: number

		public Phone(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'areaCode') {
							areaCode = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Phone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AddressDetail_Z {
		public Address_Y address {get;set;} 
		public String addressTypeDd {get;set;} 
		public Integer monthsAtAddress {get;set;} 
		public String residentialStatusDd {get;set;} 

		public AddressDetail_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address_Y(parser);
						} else if (text == 'addressTypeDd') {
							addressTypeDd = parser.getText();
						} else if (text == 'monthsAtAddress') {
							monthsAtAddress = parser.getIntegerValue();
						} else if (text == 'residentialStatusDd') {
							residentialStatusDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AddressDetail_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Property {
		public Integer propertyId {get;set;} 
		public Double actualAppraisalValue {get;set;} 
		public Address_W address {get;set;} 
		public String appraisalDateAct {get;set;} 
		public String dwellingStyleDd {get;set;} 
		public String dwellingTypeDd {get;set;} 
		public Decimal estimatedAppraisalValue {get;set;} 
		public String feesIncludeHeat {get;set;} 
		public String garageSizeDd {get;set;} 
		public String garageTypeDd {get;set;} 
		public String heatTypeDd {get;set;} 
		public String includetds {get;set;} 
		public RentalIncome rentalIncome {get;set;} 
		public String insulatedWithUffi {get;set;} 
		public String legalLine1 {get;set;} 
		public String legalLine2 {get;set;} 
		public String legalLine3 {get;set;} 
		public Double originalPurchasePrice {get;set;}
		public Double livingSpace {get;set;} 
		public String livingSpaceUnitOfMeasurDd {get;set;} 
		public Double lotSize {get;set;} 
		public String lotSizeUnitOfMeasureDd {get;set;} 
		public String mlsListingFlag {get;set;} 
		public String newConstructionDd {get;set;} 
		public Double numberOfUnits {get;set;} 
		public String occupancyTypeDd {get;set;} 
		public String primaryPropertyFlag {get;set;} 
		public String propertyTypeDd {get;set;} 
		public String propertyValueIndexId {get;set;} 
		public Double purchasePrice {get;set;} 
		public String realtorInfo {get;set;} 
		public String rentalOffsetOption {get;set;} 
		public String sewageTypeDd {get;set;} 
		public Double structureAge {get;set;} 
		public String subjectPropertyFlag {get;set;} 
		public Double taxationYear {get;set;} 
		public String waterTypeDd {get;set;} 
		public List<PropertyExpense> propertyExpense {get;set;}
		/*Added by Zain Abbas - Start*/
		public string refiOrigPurchaseDate {get; set;}
		public Property(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'propertyId') {
							propertyId = parser.getIntegerValue();
						} else if (text == 'actualAppraisalValue') {
							actualAppraisalValue = parser.getDoubleValue();
						} else if (text == 'address') {
							address = new Address_W(parser);
						} else if (text == 'appraisalDateAct') {
							appraisalDateAct = parser.getText();
						} else if (text == 'dwellingStyleDd') {
							dwellingStyleDd = parser.getText();
						} else if (text == 'dwellingTypeDd') {
							dwellingTypeDd = parser.getText();
						} else if (text == 'estimatedAppraisalValue') {
							estimatedAppraisalValue = parser.getDecimalValue();
						} else if (text == 'feesIncludeHeat') {
							feesIncludeHeat = parser.getText();
						} else if (text == 'garageSizeDd') {
							garageSizeDd = parser.getText();
						} else if (text == 'garageTypeDd') {
							garageTypeDd = parser.getText();
						} else if (text == 'heatTypeDd') {
							heatTypeDd = parser.getText();
						} else if (text == 'includetds') {
							includetds = parser.getText();
						} else if (text == 'rentalIncome') {
							rentalIncome = new RentalIncome(parser);
						} else if (text == 'insulatedWithUffi') {
							insulatedWithUffi = parser.getText();
						} else if (text == 'legalLine1') {
							legalLine1 = parser.getText();
						} else if (text == 'legalLine2') {
							legalLine2 = parser.getText();
						} else if (text == 'legalLine3') {
							legalLine3 = parser.getText();
						} else if (text == 'livingSpace') {
							livingSpace = parser.getDoubleValue();
						} else if (text == 'livingSpaceUnitOfMeasurDd') {
							livingSpaceUnitOfMeasurDd = parser.getText();
						} else if (text == 'lotSize') {
							lotSize = parser.getDoubleValue();
						} else if (text == 'lotSizeUnitOfMeasureDd') {
							lotSizeUnitOfMeasureDd = parser.getText();
						} else if (text == 'mlsListingFlag') {
							mlsListingFlag = parser.getText();
						} else if (text == 'newConstructionDd') {
							newConstructionDd = parser.getText();
						} else if (text == 'numberOfUnits') {
							numberOfUnits = parser.getDoubleValue();
						} else if (text == 'occupancyTypeDd') {
							occupancyTypeDd = parser.getText();
						} else if (text == 'primaryPropertyFlag') {
							primaryPropertyFlag = parser.getText();
						} else if (text == 'propertyTypeDd') {
							propertyTypeDd = parser.getText();
						} else if (text == 'propertyValueIndexId') {
							propertyValueIndexId = parser.getText();
						} else if (text == 'purchasePrice') {
							purchasePrice = parser.getDoubleValue();
						} else if (text == 'realtorInfo') {
							realtorInfo = parser.getText();
						} else if (text == 'rentalOffsetOption') {
							rentalOffsetOption = parser.getText();
						} else if (text == 'sewageTypeDd') {
							sewageTypeDd = parser.getText();
						} else if (text == 'structureAge') {
							structureAge = parser.getDoubleValue();
						} else if (text == 'subjectPropertyFlag') {
							subjectPropertyFlag = parser.getText();
						} else if (text == 'taxationYear') {
							taxationYear = parser.getDoubleValue();
						} else if (text == 'waterTypeDd') {
							waterTypeDd = parser.getText();
						} else if (text == 'propertyExpense') {
							propertyExpense = arrayOfPropertyExpense(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Property consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ClauseList {
		public Integer clauseId {get;set;} 
		public Description conditionStatus {get;set;} 
		public Double itemNumber {get;set;} 
		public Integer loanDecisionId {get;set;} 
		public Description sectionCode {get;set;} 
		public String code {get;set;}
		public String text {get;set;} 

		public ClauseList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'clauseId') {
							clauseId = parser.getIntegerValue();
						} else if (text == 'conditionStatus') {
							conditionStatus = new Description(parser);
						} else if (text == 'itemNumber') {
							itemNumber = parser.getIntegerValue();
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else if (text == 'sectionCode') {
							sectionCode = new Description(parser);
						} else if (text == 'text') {
							text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ClauseList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Notes {
		public String categoryDd {get;set;} 
		public String entryDate {get;set;} 
		public Integer dealNotesId {get;set;} 
		public AgentProfile dealNotesUserId {get;set;} 
		public String text {get;set;} 

		public Notes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'categoryDd') {
							categoryDd = parser.getText();
						} else if (text == 'entryDate') {
							entryDate = parser.getText();
						} else if (text == 'dealNotesId') {
							dealNotesId = parser.getIntegerValue();
						} else if (text == 'dealNotesUserId') {
							dealNotesUserId = new AgentProfile(parser);
						} else if (text == 'text') {
							text = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Notes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class WorkQueueTask {
		public Integer workQueueTaskId {get;set;} 
		public AdministratorProfile assignToId {get;set;} 
		public String comments {get;set;} 
		public AgentProfile createdById {get;set;} 
		public String dateCreated {get;set;} 
		public Integer dealId {get;set;} 
		public String dueDate {get;set;} 
		public String priorityTypeDd {get;set;} 
		public String taskTypeDd {get;set;} 

		public WorkQueueTask(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'workQueueTaskId') {
							workQueueTaskId = parser.getIntegerValue();
						} else if (text == 'assignToId') {
							assignToId = new AdministratorProfile(parser);
						} else if (text == 'comments') {
							comments = parser.getText();
						} else if (text == 'createdById') {
							createdById = new AgentProfile(parser);
						} else if (text == 'dateCreated') {
							dateCreated = parser.getText();
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'dueDate') {
							dueDate = parser.getText();
						} else if (text == 'priorityTypeDd') {
							priorityTypeDd = parser.getText();
						} else if (text == 'taskTypeDd') {
							taskTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'WorkQueueTask consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BorrowerIds {
		public Integer borrowerId {get;set;} 

		public BorrowerIds(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'borrowerId') {
							borrowerId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'BorrowerIds consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AdministratorProfile {
		public Contact_Y contact {get;set;} 
		public String firmCode {get;set;} 
		public String licenseRegistrationNumber {get;set;} 
		public String profileStatusDd {get;set;} 
		public String userLogin {get;set;} 
		public Integer userProfileId {get;set;} 
		public String userTypeDd {get;set;} 

		public AdministratorProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_Y(parser);
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'licenseRegistrationNumber') {
							licenseRegistrationNumber = parser.getText();
						} else if (text == 'profileStatusDd') {
							profileStatusDd = parser.getText();
						} else if (text == 'userLogin') {
							userLogin = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = parser.getIntegerValue();
						} else if (text == 'userTypeDd') {
							userTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AdministratorProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Submission {
		public Integer lenderSubmissionId {get;set;} 
		public String appNumber {get;set;} 
		public Integer dealId {get;set;} 
		public String extendedReviewFlag {get;set;} 
		public String firmCode {get;set;} 
		public Integer firmProfileId {get;set;} 
		public String language {get;set;} 
		public LenderProfile lenderProfile {get;set;} 
		public Integer mortgageId {get;set;} 
		public String originatorNotes {get;set;} 
		public String routingReceiver {get;set;} 
		public String routingSender {get;set;} 
		public String submissionStatusDd {get;set;} 
		public String submitRequestTime {get;set;} 
		public AgentProfile userProfileId {get;set;} 
		//public SubmissionAgentProfile userProfileId {get;set;} 
		public List<ConditionStatusUpdate> conditionStatusUpdate {get;set;} 
		public List<DealStatusUpdate> dealStatusUpdate {get;set;} 
		public List<Responses> responses {get;set;} 

		public Submission(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'lenderSubmissionId') {
							lenderSubmissionId = parser.getIntegerValue();
						} else if (text == 'appNumber') {
							appNumber = parser.getText();
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'extendedReviewFlag') {
							extendedReviewFlag = parser.getText();
						} else if (text == 'firmCode') {
							firmCode = parser.getText();
						} else if (text == 'firmProfileId') {
							firmProfileId = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'lenderProfile') {
							lenderProfile = new LenderProfile(parser);
						} else if (text == 'mortgageId') {
							mortgageId = parser.getIntegerValue();
						} else if (text == 'originatorNotes') {
							originatorNotes = parser.getText();
						} else if (text == 'routingReceiver') {
							routingReceiver = parser.getText();
						} else if (text == 'routingSender') {
							routingSender = parser.getText();
						} else if (text == 'submissionStatusDd') {
							submissionStatusDd = parser.getText();
						} else if (text == 'submitRequestTime') {
							submitRequestTime = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = new AgentProfile(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Submission consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name_Z {
		public String salutationDd {get;set;} 
		public String firstName {get;set;} 
		public String middleInitial {get;set;} 
		public String lastName {get;set;} 
		public String first {get;set;} 
		public String last {get;set;} 

		public Name_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'salutationDd') {
							salutationDd = parser.getText();
						} else if (text == 'firstName') {
							firstName = parser.getText();
						} else if (text == 'middleInitial') {
							middleInitial = parser.getText();
						} else if (text == 'lastName') {
							lastName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Name_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name_Y {
		public String first {get;set;} 
		public String last {get;set;} 
		public Description prefix {get;set;} 

		public Name_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'prefix') {
							prefix = new Description(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Name_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name_X {
		public String first {get;set;} 
		public String last {get;set;} 
		public String middle {get;set;} 
		public Description prefix {get;set;} 

		public Name_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first') {
							first = parser.getText();
						} else if (text == 'last') {
							last = parser.getText();
						} else if (text == 'middle') {
							middle = parser.getText();
						} else if (text == 'prefix') {
							prefix = new Description(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Name_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}


	public class FeesPmtMethod {
		public String code {get;set;} 
		public String desc_Z {get;set;} // in json: desc

		public FeesPmtMethod(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'desc') {
							desc_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FeesPmtMethod consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Routing {
		public String receiver {get;set;} 
		public String sender {get;set;} 

		public Routing(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'receiver') {
							receiver = parser.getText();
						} else if (text == 'sender') {
							sender = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Routing consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OtherIncome {
		public Integer incomeId {get;set;} 
		public Double annualIncomeAmount {get;set;} 
		public Double incomeAmount {get;set;} 
		public String incomeDescription {get;set;} 
		public String incomePeriodDd {get;set;} 
		public String incomeTypeDd {get;set;} 

		public OtherIncome(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'incomeId') {
							incomeId = parser.getIntegerValue();
						} else if (text == 'annualIncomeAmount') {
							annualIncomeAmount = parser.getDoubleValue();
						} else if (text == 'incomeAmount') {
							incomeAmount = parser.getDoubleValue();
						} else if (text == 'incomeDescription') {
							incomeDescription = parser.getText();
						} else if (text == 'incomePeriodDd') {
							incomePeriodDd = parser.getText();
						} else if (text == 'incomeTypeDd') {
							incomeTypeDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OtherIncome consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fees {
		public Integer dealFeeId {get;set;} 
		public String deduct {get;set;} 
		public String feeId {get;set;} 
		public String includeInAprFlag {get;set;} 
		public Integer mortgageId {get;set;} 
		public Double feeAmount {get;set;} 
		public String feeComments {get;set;} 
		public String feeDescription {get;set;} 

		public Fees(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dealFeeId') {
							dealFeeId = parser.getIntegerValue();
						} else if (text == 'deduct') {
							deduct = parser.getText();
						} else if (text == 'feeId') {
							feeId = parser.getText();
						} else if (text == 'includeInAprFlag') {
							includeInAprFlag = parser.getText();
						} else if (text == 'mortgageId') {
							mortgageId = parser.getIntegerValue();
						} else if (text == 'feeAmount') {
							feeAmount = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Fees consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DealStatusUpdate {
		public Integer dealId {get;set;} 
		public String dealStatusUpdateId {get;set;}
		public String dealStatusTimeStamp {get;set;} 
		public String ingestionTimeStamp {get;set;} 
		public String lenderName {get;set;} 
		public List<DealStatus> dealStatus {get;set;} 

		public DealStatusUpdate(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'dealStatusTimeStamp') {
							dealStatusTimeStamp = parser.getText();
						} else if (text == 'ingestionTimeStamp') {
							ingestionTimeStamp = parser.getText();
						} else if (text == 'lenderName') {
							lenderName = parser.getText();
						} else if (text == 'dealStatus') {
							dealStatus = arrayOfDealStatus(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DealStatusUpdate consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class QualifyDetail {
		public Double amortizationTerm {get;set;} 
		public String interestCompoundDd {get;set;} 
		public String interestOnlyFlag {get;set;} 
		public Integer qualifyDetailId {get;set;} 
		public String repaymentTypeDd {get;set;}

		public QualifyDetail(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amortizationTerm') {
							amortizationTerm = parser.getDoubleValue();
						} else if (text == 'interestCompoundDd') {
							interestCompoundDd = parser.getText();
						} else if (text == 'interestOnlyFlag') {
							interestOnlyFlag = parser.getText();
						} else if (text == 'qualifyDetailId') {
							qualifyDetailId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'QualifyDetail consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact {
		public Double contactId {get;set;} 
		public Address address {get;set;} 
		public String contactCellPhone {get;set;} 
		public String contactEmailAddress {get;set;} 
		public String contactFaxNumber {get;set;} 
		public ContactName contactName {get;set;} 
		public String contactPhoneNumber {get;set;} 
		public String contactPhoneNumberExtension {get;set;} 
		public String languagePreferenceDd {get;set;} 
		public String preferredContactMethodDd {get;set;} 

		public Contact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contactId') {
							contactId = parser.getDoubleValue();
						} else if (text == 'address') {
							address = new Address(parser);
						} else if (text == 'contactCellPhone') {
							contactCellPhone = parser.getText();
						} else if (text == 'contactEmailAddress') {
							contactEmailAddress = parser.getText();
						} else if (text == 'contactFaxNumber') {
							contactFaxNumber = parser.getText();
						} else if (text == 'contactName') {
							contactName = new ContactName(parser);
						} else if (text == 'contactPhoneNumber') {
							contactPhoneNumber = parser.getText();
						} else if (text == 'contactPhoneNumberExtension') {
							contactPhoneNumberExtension = parser.getText();
						} else if (text == 'languagePreferenceDd') {
							languagePreferenceDd = parser.getText();
						} else if (text == 'preferredContactMethodDd') {
							preferredContactMethodDd = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Liability {
		public Integer liabilityId {get;set;} 
		public Integer borrowerId {get;set;} 
		public String cbScraped {get;set;} 
		public Double creditLimit {get;set;} 
		public Double liabilityAmount {get;set;} 
		public String liabilityDescription {get;set;} 
		public Double liabilityMonthlyPayment {get;set;} 
		public String liabilityTypeDd {get;set;} 
		public String maturityDate {get;set;} 
		public String monthlyPaymentOverride {get;set;} 
		public String shared {get;set;} 

		public Liability(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'liabilityId') {
							liabilityId = parser.getIntegerValue();
						} else if (text == 'borrowerId') {
							borrowerId = parser.getIntegerValue();
						} else if (text == 'cbScraped') {
							cbScraped = parser.getText();
						} else if (text == 'creditLimit') {
							creditLimit = parser.getDoubleValue();
						} else if (text == 'liabilityAmount') {
							liabilityAmount = parser.getDoubleValue();
						} else if (text == 'liabilityDescription') {
							liabilityDescription = parser.getText();
						} else if (text == 'liabilityMonthlyPayment') {
							liabilityMonthlyPayment = parser.getDoubleValue();
						} else if (text == 'liabilityTypeDd') {
							liabilityTypeDd = parser.getText();
						} else if (text == 'maturityDate') {
							maturityDate = parser.getText();
						} else if (text == 'monthlyPaymentOverride') {
							monthlyPaymentOverride = parser.getText();
						} else if (text == 'shared') {
							shared = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Liability consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class LenderProfile {
		public Contact_T contact {get;set;} 
		public String lenderName {get;set;} 
		public String lenderNameFr {get;set;} 
		public Integer lenderProfileId {get;set;} 
		public String linkId {get;set;} 
		public String registrationNameFr {get;set;} 

		public LenderProfile(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'contact') {
							contact = new Contact_T(parser);
						} else if (text == 'lenderName') {
							lenderName = parser.getText();
						} else if (text == 'lenderNameFr') {
							lenderNameFr = parser.getText();
						} else if (text == 'lenderProfileId') {
							lenderProfileId = parser.getIntegerValue();
						} else if (text == 'linkId') {
							linkId = parser.getText();
						} else if (text == 'registrationNameFr') {
							registrationNameFr = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'LenderProfile consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SubjectPropertyList {
		public Address_T address {get;set;} 
		public Double annualTaxAmt {get;set;} 
		public Building building {get;set;} 
		public Integer loanDecisionId {get;set;} 
		public Integer subjectPropertyId {get;set;} 

		public SubjectPropertyList(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = new Address_T(parser);
						} else if (text == 'annualTaxAmt') {
							annualTaxAmt = parser.getDoubleValue();
						} else if (text == 'building') {
							building = new Building(parser);
						} else if (text == 'loanDecisionId') {
							loanDecisionId = parser.getIntegerValue();
						} else if (text == 'subjectPropertyId') {
							subjectPropertyId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'SubjectPropertyList consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Result result {get;set;} 

	public FilogixGETJSONWrapper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'result') {
						result = new Result(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'FilogixGETJSONWrapper consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class DealHistory {
		public String applicationId {get;set;} 
		public Integer dealHistoryId {get;set;} 
		public Integer dealId {get;set;} 
		public String statusDd {get;set;} 
		public String transactionDate {get;set;} 
		public String transactionText {get;set;} 
		public String transactionTypeDd {get;set;} 
		public AgentProfile userProfileId {get;set;} 

		public DealHistory(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'applicationId') {
							applicationId = parser.getText();
						} else if (text == 'dealHistoryId') {
							dealHistoryId = parser.getIntegerValue();
						} else if (text == 'dealId') {
							dealId = parser.getIntegerValue();
						} else if (text == 'statusDd') {
							statusDd = parser.getText();
						} else if (text == 'transactionDate') {
							transactionDate = parser.getText();
						} else if (text == 'transactionText') {
							transactionText = parser.getText();
						} else if (text == 'transactionTypeDd') {
							transactionTypeDd = parser.getText();
						} else if (text == 'userProfileId') {
							userProfileId = new AgentProfile(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DealHistory consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ContactName {
		public String salutationDd {get;set;} 
		public String contactFirstName {get;set;} 
		public String contactMiddleInitial {get;set;} 
		public String contactLastName {get;set;} 

		public ContactName(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'salutationDd') {
							salutationDd = parser.getText();
						} else if (text == 'contactFirstName') {
							contactFirstName = parser.getText();
						} else if (text == 'contactMiddleInitial') {
							contactMiddleInitial = parser.getText();
						} else if (text == 'contactLastName') {
							contactLastName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ContactName consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Submissions {
		public Submission submission {get;set;} 

		public Submissions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'submission') {
							submission = new Submission(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Submissions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RentalIncome {
		public Integer incomeId {get;set;} 
		public Double incomeAmount {get;set;} 
		public String incomePeriodDd {get;set;} 
		public String incomeTypeDd {get;set;} 
		public Double incPercentInGds {get;set;} 
		public Double incPercentInTds {get;set;} 

		public RentalIncome(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'incomeId') {
							incomeId = parser.getIntegerValue();
						} else if (text == 'incomeAmount') {
							incomeAmount = parser.getDoubleValue();
						} else if (text == 'incomePeriodDd') {
							incomePeriodDd = parser.getText();
						} else if (text == 'incomeTypeDd') {
							incomeTypeDd = parser.getText();
						} else if (text == 'incPercentInGds') {
							incPercentInGds = parser.getDoubleValue();
						} else if (text == 'incPercentInTds') {
							incPercentInTds = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'RentalIncome consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static FilogixGETJSONWrapper parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new FilogixGETJSONWrapper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Double depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





    private static List<AddressDetail> arrayOfAddressDetail(System.JSONParser p) {
        List<AddressDetail> res = new List<AddressDetail>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AddressDetail(p));
        }
        return res;
    }




    private static List<Applicant> arrayOfApplicant(System.JSONParser p) {
        List<Applicant> res = new List<Applicant>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Applicant(p));
        }
        return res;
    }









    private static List<Identification> arrayOfIdentification(System.JSONParser p) {
        List<Identification> res = new List<Identification>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Identification(p));
        }
        return res;
    }













    private static List<Mortgage_Z> arrayOfMortgage_Z(System.JSONParser p) {
        List<Mortgage_Z> res = new List<Mortgage_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Mortgage_Z(p));
        }
        return res;
    }



    private static List<PropertyExpense> arrayOfPropertyExpense(System.JSONParser p) {
        List<PropertyExpense> res = new List<PropertyExpense>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PropertyExpense(p));
        }
        return res;
    }






    private static List<AdjustmentList> arrayOfAdjustmentList(System.JSONParser p) {
        List<AdjustmentList> res = new List<AdjustmentList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AdjustmentList(p));
        }
        return res;
    }




    private static List<AddressDetail_Z> arrayOfAddressDetail_Z(System.JSONParser p) {
        List<AddressDetail_Z> res = new List<AddressDetail_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AddressDetail_Z(p));
        }
        return res;
    }


    private static List<DealStatus> arrayOfDealStatus(System.JSONParser p) {
        List<DealStatus> res = new List<DealStatus>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DealStatus(p));
        }
        return res;
    }






    private static List<ApplicantGroup> arrayOfApplicantGroup(System.JSONParser p) {
        List<ApplicantGroup> res = new List<ApplicantGroup>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ApplicantGroup(p));
        }
        return res;
    }


    private static List<DownPaymentSource> arrayOfDownPaymentSource(System.JSONParser p) {
        List<DownPaymentSource> res = new List<DownPaymentSource>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DownPaymentSource(p));
        }
        return res;
    }


    private static List<EmploymentHistory> arrayOfEmploymentHistory(System.JSONParser p) {
        List<EmploymentHistory> res = new List<EmploymentHistory>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new EmploymentHistory(p));
        }
        return res;
    }











    private static List<DocumentList> arrayOfDocumentList(System.JSONParser p) {
        List<DocumentList> res = new List<DocumentList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DocumentList(p));
        }
        return res;
    }


    private static List<Liability> arrayOfLiability(System.JSONParser p) {
        List<Liability> res = new List<Liability>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Liability(p));
        }
        return res;
    }


    private static List<SubjectPropertyList> arrayOfSubjectPropertyList(System.JSONParser p) {
        List<SubjectPropertyList> res = new List<SubjectPropertyList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new SubjectPropertyList(p));
        }
        return res;
    }


    private static List<EmploymentHistory_Z> arrayOfEmploymentHistory_Z(System.JSONParser p) {
        List<EmploymentHistory_Z> res = new List<EmploymentHistory_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new EmploymentHistory_Z(p));
        }
        return res;
    }



    private static List<WorkQueueTask> arrayOfWorkQueueTask(System.JSONParser p) {
        List<WorkQueueTask> res = new List<WorkQueueTask>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new WorkQueueTask(p));
        }
        return res;
    }





    private static List<DealStatusUpdate> arrayOfDealStatusUpdate(System.JSONParser p) {
        List<DealStatusUpdate> res = new List<DealStatusUpdate>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DealStatusUpdate(p));
        }
        return res;
    }


    private static List<OtherIncome> arrayOfOtherIncome(System.JSONParser p) {
        List<OtherIncome> res = new List<OtherIncome>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OtherIncome(p));
        }
        return res;
    }





    private static List<Mortgage> arrayOfMortgage(System.JSONParser p) {
        List<Mortgage> res = new List<Mortgage>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Mortgage(p));
        }
        return res;
    }




    private static List<BorrowerIds> arrayOfBorrowerIds(System.JSONParser p) {
        List<BorrowerIds> res = new List<BorrowerIds>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new BorrowerIds(p));
        }
        return res;
    }











    private static List<OfficeList> arrayOfOfficeList(System.JSONParser p) {
        List<OfficeList> res = new List<OfficeList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OfficeList(p));
        }
        return res;
    }




    private static List<DealHistory> arrayOfDealHistory(System.JSONParser p) {
        List<DealHistory> res = new List<DealHistory>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DealHistory(p));
        }
        return res;
    }


    private static List<Notes> arrayOfNotes(System.JSONParser p) {
        List<Notes> res = new List<Notes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Notes(p));
        }
        return res;
    }


    private static List<Participant> arrayOfParticipant(System.JSONParser p) {
        List<Participant> res = new List<Participant>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Participant(p));
        }
        return res;
    }



    private static List<RepresentativeList> arrayOfRepresentativeList(System.JSONParser p) {
        List<RepresentativeList> res = new List<RepresentativeList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RepresentativeList(p));
        }
        return res;
    }







    private static List<Asset> arrayOfAsset(System.JSONParser p) {
        List<Asset> res = new List<Asset>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Asset(p));
        }
        return res;
    }


    private static List<ConditionStatusUpdate> arrayOfConditionStatusUpdate(System.JSONParser p) {
        List<ConditionStatusUpdate> res = new List<ConditionStatusUpdate>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ConditionStatusUpdate(p));
        }
        return res;
    }






    private static List<OtherProperty> arrayOfOtherProperty(System.JSONParser p) {
        List<OtherProperty> res = new List<OtherProperty>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OtherProperty(p));
        }
        return res;
    }








    private static List<Responses> arrayOfResponses(System.JSONParser p) {
        List<Responses> res = new List<Responses>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Responses(p));
        }
        return res;
    }




    private static List<Submissions> arrayOfSubmissions(System.JSONParser p) {
        List<Submissions> res = new List<Submissions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Submissions(p));
        }
        return res;
    }



    private static List<Conditions> arrayOfConditions(System.JSONParser p) {
        List<Conditions> res = new List<Conditions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Conditions(p));
        }
        return res;
    }



    private static List<Fees> arrayOfFees(System.JSONParser p) {
        List<Fees> res = new List<Fees>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Fees(p));
        }
        return res;
    }








    private static List<ClauseList> arrayOfClauseList(System.JSONParser p) {
        List<ClauseList> res = new List<ClauseList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ClauseList(p));
        }
        return res;
    }





    private static List<ApplicantList> arrayOfApplicantList(System.JSONParser p) {
        List<ApplicantList> res = new List<ApplicantList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ApplicantList(p));
        }
        return res;
    }
    
    Public static datetime returnGMTformat (string utcTime){
        if(!String.isBlank(utcTime) && utcTime !=null){
			DateTime dt = DateTime.valueOf(utcTime.replace('T',' '));

			Integer addyears=0;
            Integer MaxYearsfromToday = 3999; // Max year allowed by Salesforce is 4000 //System.Today().year() + 100;
            //https://help.salesforce.com/s/articleView?id=000318735&type=1
            
            // Making sure to have year 1900 minimum & max year to be 100 years from today
			Integer currentYear = dt.year();    
			if(currentYear < 1900){
				addyears = 1900 - currentYear;
			} else if(currentYear > MaxYearsfromToday){
				addyears = MaxYearsfromToday- currentYear;
			}
            
            // Adjusting the date w.r.t the years logic above
            if(addyears!=0){
                dt = dt.addYears(addyears);
            }
			
			system.debug('UTC Formatted Date => ' + utcTime);
			system.debug('GMT Formatted Date => ' + dt);
			
			return dt;
		}
		return null;
    }

}   
    // Public static datetime returnGMTformat (string utcTime){
    //     if(!String.isBlank(utcTime) && utcTime !=null){
	// 		DateTime dt = DateTime.valueOf(utcTime.replace('T',' '));    
			
	// 		system.debug('UTC Formatted Date => ' + utcTime);
	// 		system.debug('GMT Formatted Date => ' + dt);
			
	// 		return dt;
	// 	}
	// 	return null;
    // }

//} // }

//}